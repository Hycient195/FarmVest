$num-cols: 24;
@use 'sass:math';

$gaps: (
  "1": 10px,
  "2": 20px,
  "3": 30px,
  "4": 40px,
  "5": 50px
);

@each $key, $val in $gaps{
  .gap-#{$key} > *{
    padding: $val
  }
  .gap-#{$key}{
    margin-left: -$val;
    margin-right: -$val;
  }
}

/* Justification and layout of Grid */
$layout: flex-start, flex-end, center, space-between, space-around;
@each $val in $layout{
  .justify-#{$val}{
    justify-content: $val;
  }
}

.container{
  margin: 0;
  padding: 0 2em !important;
  box-sizing: border-box;
  width: 100% !important;
  max-width: 1400px;
  // background-color: blue;
}

.row{
  display: flex;
  padding: 0;
  margin: 0;
  flex-flow: row wrap;
}

.grid-row{
  display: grid;
  grid-template-columns: repeat($num-cols, 1fr);
  
  @each $key, $value in $gaps{
    &.gap-#{$key}{
      gap: $value;
    }
  } 
}

.grid-col{
  display: grid;
  grid-template-rows: repeat($num-cols, 1fr);
  
  @each $key, $value in gaps{
    .gap-#{$key}{
      gap: $value;
    }
  } 
}

@include xs {
  @for $i from 1 through $num-cols{
    .col-xs-#{$i}{
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(100% * $i, $num-cols);
    }

    .grid-col-xs-#{$i}{
      grid-column-end: span $i;
    }

    .grid-row-xs-#{$i}{
      grid-row-end: span $i;
    }
  }
}

@include sm {
  $base-font-size: 4px;
  @for $i from 1 through $num-cols{
    .col-sm-#{$i}{
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(100% * $i, $num-cols);
    }

    .grid-col-sm-#{$i}{
      grid-column-end: span $i;
    }

    .grid-row-sm-#{$i}{
      grid-row-end: span $i;
    }
  }
}

@include md {
  @for $i from 1 through $num-cols{
    .com-md-#{$i}{
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(100% * $i, $num-cols);
    }

    .grid-col-md-#{$i}{
      grid-column-end: span $i;
    }

    .grid-row-md-#{$i}{
      grid-row-end: span $i;
    }
  }
}

@include lg {
  @for $i from 1 through $num-cols{
    .col-lg-#{$i}{
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(100% * $i, $num-cols);
    }

    .grid-col-lg-#{$i}{
      grid-column-end: span $i;
    }

    .grid-row-lg-#{$i}{
      grid-row-end: span $i;
    }
  }
}

@include xl {
  @for $i from 1 through $num-cols{
    .col-xl-#{$i}{
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div(100% * $i, $num-cols);
    }

    .grid-col-xl-#{$i}{
      grid-column-end: span $i;
    }

    .grid-row-xl-#{$i}{
      grid-row-end: span $i;
    }
  }
}